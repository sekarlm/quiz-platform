{"remainingRequest":"/home/sekar/Desktop/portfolio/vue/Quiz-Platform/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sekar/Desktop/portfolio/vue/Quiz-Platform/src/components/QuestionBox.vue?vue&type=style&index=0&id=62ab2b85&scoped=true&lang=css&","dependencies":[{"path":"/home/sekar/Desktop/portfolio/vue/Quiz-Platform/src/components/QuestionBox.vue","mtime":1589419596749},{"path":"/home/sekar/Desktop/portfolio/vue/Quiz-Platform/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sekar/Desktop/portfolio/vue/Quiz-Platform/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/sekar/Desktop/portfolio/vue/Quiz-Platform/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/sekar/Desktop/portfolio/vue/Quiz-Platform/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sekar/Desktop/portfolio/vue/Quiz-Platform/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubGlzdC1ncm91cCB7CiAgICBtYXJnaW4tYm90dG9tOiAxNXB4Owp9CgoubGlzdC1ncm91cC1pdGVtOmhvdmVyIHsKICAgIGJhY2tncm91bmQ6ICNlZWU7CiAgICBjdXJzb3I6IHBvaW50ZXI7Cn0KCi5idG4gewogICAgbWFyZ2luOiAwIDVweDsKfQoKLnNlbGVjdGVkIHsKICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Ymx1ZTsKfQoKLmNvcnJlY3QgewogICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47Cn0KCi5pbmNvcnJlY3QgewogICAgYmFja2dyb3VuZC1jb2xvcjogcmVkOwp9Cg=="},{"version":3,"sources":["QuestionBox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"QuestionBox.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div>\n        <b-jumbotron>\n            <template v-slot:lead>\n            {{currQuestion.question}}\n            </template>\n\n            <hr class=\"my-4\">\n\n            <b-list-group>\n                <b-list-group-item\n                    v-for=\"(answer, index) in answers\"\n                    :key=\"index\"\n                    @click=\"selectAnswer(index)\"\n                    :class=\"answerClass(index)\"\n                >\n                    {{answer}}\n                </b-list-group-item>\n            </b-list-group>\n\n            <b-button \n            variant=\"primary\"\n            @click=\"submitAnswer\"\n            :disabled=\"selected === null || answered\"\n            >\n                Submit\n            </b-button>\n            <b-button @click=\"next\" variant=\"success\" href=\"#\">Next</b-button>\n        </b-jumbotron>\n    </div>\n</template>\n\n<script>\nimport _ from 'lodash'\n\nexport default {\n    props: {\n        currQuestion: Object,\n        next: Function,\n        increment: Function\n    },\n    data() {\n        return {\n            selected: null,\n            shuffledAnswers: [],\n            correctIndex: null,\n            answered: null\n        }\n    },\n    computed: {\n        answers() {\n            let answers = [...this.currQuestion.incorrect_answers]\n            answers.push(this.currQuestion.correct_answer)\n            return answers\n        }\n    },\n    watch: {\n        currQuestion: {\n            immediate: true,\n            handler() {\n                this.selected = null\n                this.answered = false\n                this.shuffleAnswer()\n            }\n        }\n    },\n    methods: {\n        selectAnswer(index) {\n            this.selected = index\n        },\n        shuffleAnswer() {\n            let answers = [...this.currQuestion.incorrect_answers, this.currQuestion.correct_answer]\n            this.shuffledAnswers = _.shuffle(answers)\n            this.correctIndex = this.shuffledAnswers.indexOf(this.currQuestion.correct_answer)\n        },\n        submitAnswer() {\n            let isCorrect = false\n\n            if (this.selected === this.correctIndex) {\n                isCorrect = true\n            }\n\n            this.answered = true\n            this.increment(isCorrect)\n        },\n        answerClass(index) {\n            let answerClass = ''\n            if (!this.answered && this.selected === index) {\n                answerClass = 'selected'\n            } else if (this.answered && this.correctIndex === index) {\n                answerClass = 'correct'\n            } else if (this.answered && this.selected === index && this.correctIndex !== index) {\n                answerClass = 'incorrect'\n            }\n            return answerClass\n        },\n    },\n    mounted() {\n        console.log(this.currQuestion)\n    }\n}\n</script>\n\n<style scoped>\n.list-group {\n    margin-bottom: 15px;\n}\n\n.list-group-item:hover {\n    background: #eee;\n    cursor: pointer;\n}\n\n.btn {\n    margin: 0 5px;\n}\n\n.selected {\n    background-color: lightblue;\n}\n\n.correct {\n    background-color: green;\n}\n\n.incorrect {\n    background-color: red;\n}\n</style>"]}]}